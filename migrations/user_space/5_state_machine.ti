set_type("State", {
  unique_id: "#",
  instance: "Instance",
  state: "str",
  attributes: "str",
  last_changed: "datetime?",
  last_updated: "datetime",
  old_state: "State?"
});

set_type("StateMachine", {
  states: "{State}"
});

mod_type("UserSpace", "add", "state_machine", "StateMachine");

mod_type("StateMachine", "add", "last_states", "[]");

mod_type("StateMachine", "add", "get_last_state", |this, instance| {
  "Get the latest entry for a specific instance";
  type_assert(instance, "Instance");

  last_entry = this.last_states.find(|e| e[0] == instance);
  
  if (last_entry == nil) {
    return nil
  };

  return last_entry[1];
});

mod_type("StateMachine", "add", "update_last_state", |this, instance, state| {
  "Set a new last state entry";
  type_assert(instance, "Instance");
  type_assert(state, "State");

  this.last_states.remove(|e| e[0] == instance);
  this.last_states.push([instance, state]);
});

mod_type("StateMachine", "add", "add_entry", |this, instance, state, attributes| {
  "Add a new state entry for a specific instance";
  type_assert(instance, "Instance");
  type_assert(state, "str");
  type_assert(attributes, "str");

  old_state = this.get_last_state(instance);

  if (old_state != nil && old_state.state == state && old_state.attributes == attributes) {
    last_changed = nil;
  } else {
    last_changed = datetime();
  };

  new_state = State{
    instance: instance,
    state: state,
    attributes: attributes,
    old_state: old_state,
    last_changed: last_changed
  };

  .event_bus.fire_event("state_updated", json_dump(new_state));

  this.states.add(new_state);
  this.update_last_state(instance, new_state);

  if (last_changed != nil) {
    .event_bus.fire_event("state_changed", json_dump(new_state));
  };

  return new_state;
});
